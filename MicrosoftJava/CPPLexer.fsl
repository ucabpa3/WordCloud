{
module CPPLexer
open System
open Statements
open Microsoft.FSharp.Text.Lexing
}

let Separator = ['(' ')' '{' '}' '[' ']' ';' ',' '.']
let Delimiter = ['=' '>' '<' '!' '~' '?' ':' '+' '-' '*' '/' '&' '|' '^' '%' '#']
let HexDigit = ['0'-'9' 'a'-'f' 'A'-'F']
let Digit = ['0'-'9']
let OctalDigit = ['0'-'7']
let TetraDigit = ['0'-'3']
let NonZeroDigit = ['1'-'9']
let Letter = ['a'-'z' 'A'-'Z' '_' '@']
let AnyButSlash = [^ '/']
let AnyButAstr = [^ '*']
let SPACE = [' ']
let BLK	= ['\b']
let TAB = ['\t']
let ESCCHR = ['\\']
let CR = ['\r']
let LF = ['\n']
let BLANK = ( SPACE | BLK | TAB | CR | LF )*
let TransferLine = ESCCHR BLANK*
let AnyButNewLine = [^ '\r' '\n']

let OctEscape1 = ESCCHR OctalDigit
let OctEscape2 = ESCCHR OctalDigit OctalDigit
let OctEscape3 = ESCCHR TetraDigit OctalDigit OctalDigit
let OctEscape =  OctEscape1 | OctEscape2 | OctEscape3 

let Escape = ESCCHR ( 'r' | 'n' | 'a' | 'b' | 'f' | 't' | 'v' | "xff" | '\\' | '\'' | '\"' )
let ULetter = Letter 
let Identifier = ULetter (ULetter | Digit)*

let Comment1 = "/*" (AnyButAstr | '*' AnyButSlash)* "*/"
let Comment2 = "//" AnyButNewLine*
let Comment	= Comment1 | Comment2

let Dimension = "[" ( CR | LF | TAB | BLK | BLANK | Comment )* "]"

let IntSuffix = [ 'l' 'L' ]
let DecimalNum = NonZeroDigit Digit* IntSuffix?
let OctalNum = "0" OctalDigit* IntSuffix?
let HexNum = "0" ('x' | 'X') HexDigit+ IntSuffix?
let IntegerLiteral = DecimalNum | OctalNum | HexNum

let Sign = ['+' '-']
let FlSuffix = ['f' 'F' 'd' 'D']
let SignedInt = Sign? Digit+
let Expo = ['e' 'E']
let ExponentPart = Expo SignedInt?
let Float1 = Digit+ "." Digit+? ExponentPart? FlSuffix?
let Float2 = "." Digit+ ExponentPart? FlSuffix?
let Float3 = Digit+ ExponentPart FlSuffix?
let Float4	= Digit+ FlSuffix
let FloatingPoint = Float1 | Float2 | Float3 | Float4

let AnyChrChr = [^ '\'' '\n' '\r'] 
let AnyStrChr = [^ '\"' '\n' '\r']
let Character = '\'' ( Escape | OctEscape | AnyChrChr ) '\''
let String = '\"' ( Escape | OctEscape | AnyStrChr )* '\"'
let Numeric = ( IntegerLiteral | FloatingPoint )
let Literal	= ( Numeric | Character | String )

let Keyword = ( "alignas" | "alignof" | "and" | "and_eq" | "asm" | "auto" | "bitand" | "bitor" | "bool" | "break" | "case" | "catch" | "char" | "char16_t " | "char32_t " | "class" | "compl" | "const" | "constexpr " | "const_cast" | "continue" | "decltype" | "default" | "delete" | "do" | "double" | "dynamic_cast" | "else" | "enum" | "explicit" | "export" | "extern" | "final" | "float" | "for" | "friend" | "goto" | "if" | "inline" | "int" | "long" | "mutable" | "namespace" | "new" | "noexcept" | "not" | "not_eq" | "nullptr" | "operator" | "or" | "or_eq" | "override" | "private" | "protected" | "public" | "register" | "reinterpret_cast" | "return" | "short" | "signed" | "sizeof" | "static" | "static_assert" | "static_cast" | "struct" | "switch" | "template" | "this" | "thread_local" | "throw" | "try" | "typedef" | "typeid" | "typename" | "union" | "unsigned" | "using" | "virtual" | "void" | "volatile" | "wchar_t" | "while" | "xor" | "xor_eq" )
let PreprocKeyword = ( "include" | "if" | "ifndef" | "ifdef" | "else" | "elif" | "endif" | "define" | "undef" | "line" | "error" | "warning" | "pragma" )
let Preproc = '#' BLANK* PreprocKeyword
rule tokenize = parse
| BLANK  { DONTCARE(LexBuffer<_>.LexemeString lexbuf) }

| Separator { DONTCARE(LexBuffer<_>.LexemeString lexbuf) }
| Delimiter { DONTCARE(LexBuffer<_>.LexemeString lexbuf) }
| Dimension { DONTCARE(LexBuffer<_>.LexemeString lexbuf) }
| TransferLine { DONTCARE(LexBuffer<_>.LexemeString lexbuf) }

| "TRUE" { LITERAL("TRUE") }
| "FALSE" { LITERAL("FALSE") }
| Comment { COMMENT(LexBuffer<_>.LexemeString lexbuf) }

| Keyword { KEYWORD(LexBuffer<_>.LexemeString lexbuf) }
| Identifier { IDENTIFIER(LexBuffer<_>.LexemeString lexbuf) }
| Literal { LITERAL(LexBuffer<_>.LexemeString lexbuf) }

| eof { EOF }

